---
// components/ServicesGrid.astro
import type { ReactNode } from 'react';
import { useState } from 'react';

interface Service {
  title: string;
  description: string;
  icon: ReactNode;
  link: string;
}

const services: Service[] = [
  {
    title: "Desarrollo Web a Medida",
    description: "Convertimos tus ideas en experiencias digitales. Creamos aplicaciones web modernas, r√°pidas y escalables, enfocadas en la usabilidad y la conexi√≥n con tus usuarios.",
    icon: "üíª",
    link: "/servicios/desarrollo-web"
  },
  {
    title: "Soporte y Gesti√≥n de Sistemas",
    description: "Garantizamos la continuidad de tu operaci√≥n. Nos anticipamos a los problemas y optimizamos tus sistemas con un mantenimiento proactivo y soporte experto para que siempre est√©n eficientes y seguros.",
    icon: "üîß",
    link: "/servicios/mantenimiento-sistemas"
  },
  {
    title: "Arquitectura de Infraestructura",
    description: "Dise√±amos la base tecnol√≥gica para tu crecimiento. Construimos y optimizamos infraestructuras eficientes y seguras que te preparan para escalar y competir en el futuro.",
    icon: "üèóÔ∏è",
    link: "/servicios/infraestructura-tecnologica"
  },
  {
    title: "Asesor√≠a en Transformaci√≥n Digital",
    description: "Te guiamos en la optimizaci√≥n de procesos y la adopci√≥n de tecnolog√≠as clave. Te ofrecemos una hoja de ruta clara para que tu negocio sea m√°s eficiente, innovador y competitivo.",
    icon: "üìä",
    link: "/servicios/consultoria-it"
  },
  {
    title: "Capacitaci√≥n y Cursos IT",
    description: "Invertimos en tu equipo para potenciar tu negocio. Ofrecemos cursos y programas de capacitaci√≥n personalizados en las √∫ltimas tecnolog√≠as para que tu talento se mantenga a la vanguardia.",
    icon: "üéì",
    link: "/servicios/capacitacion-it"
  }
];
---

<section id="services" class="services-section">
  <div class="waves-container" aria-hidden="true">
    <div class="wave -one"></div>
    <div class="wave -two"></div>
    <div class="wave -three"></div>
    <div class="wave -four"></div>
  </div>

  <div class="container">
    <div class="section-header" data-animate="fade-in-up">
      <h2 class="section-title"style={{ color: "white" }} >Nuestros Servicios</h2>
      <p class="section-subtitle">Soluciones tecnol√≥gicas integrales para potenciar tu negocio</p>
    </div>

    <div class="services-grid">
      {services.map((service, index) => (
        <a 
          href={service.link} 
          class="service-card" 
          data-animate="fade-in-scale" 
          data-delay={index * 100 + 300}
        >
          <div class="service-icon">{service.icon}</div>
          <h3>{service.title}</h3>
          <p>{service.description}</p>
          <span class="service-link">Descubrir m√°s ‚Üí</span>
        </a>
      ))}
    </div>
  </div>
</section>

<style>
  /* Variables CSS unificadas para consistencia */
  :root {
    --gradient-bg-services: linear-gradient(to left, #24243e, #302b63, #0f0c29);
    --wave-color-1: rgba(255, 255, 255, 0.05);
    --wave-color-2: rgba(179, 217, 255, 0.08);
    --wave-color-3: rgba(135, 206, 250, 0.07);
    --wave-color-4: rgba(255, 255, 255, 0.03);

    --text-primary: #ffffff;
    --text-secondary: #c6c6c6;
    --text-card-primary: #1c1c1e;
    --text-card-secondary: #8e8e93;
    --card-bg: #ffffff;
    --accent-color: #007bff;
    --accent-hover: #0056b3;
    --shadow-light: 0 4px 15px rgba(0, 0, 0, 0.08);
    --shadow-medium: 0 6px 20px rgba(0, 0, 0, 0.12);
    --radius: 20px;
    --transition: all 0.3s ease;
    --section-padding: clamp(2rem, 6vw, 4rem);
  }

  /* Reset y estilos base */
  .services-section {
    padding: var(--section-padding) 0;
    background: var(--gradient-bg-services);
    position: relative;
    overflow: hidden;
    isolation: isolate;
  }

  .container {
    position: relative;
    z-index: 2;
    max-width: min(1200px, 90vw);
    margin: 0 auto;
    padding: 0 clamp(1rem, 3vw, 2rem);
  }

  /* Header section */
  .section-header {
    text-align: center;
    margin-bottom: clamp(2rem, 5vw, 3rem);
  }

  .section-title {
    font-size: clamp(2rem, 5vw, 2.5rem);
    font-weight: 700;
    color: var(--text-primary);
    line-height: 1.2;
    margin-bottom: 1rem;
    color:white
  }

  .section-subtitle {
    font-size: clamp(1rem, 2.5vw, 1.1rem);
    color: var(--text-secondary);
    max-width: 600px;
    margin: 0 auto;
  }

  /* Grid de servicios */
  .services-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(min(280px, 100%), 1fr));
    gap: clamp(1.5rem, 3vw, 2rem);
    justify-content: center;
  }

  .service-card {
    background: var(--card-bg);
    border-radius: var(--radius);
    padding: clamp(1.5rem, 4vw, 2.5rem);
    box-shadow: var(--shadow-light);
    transition: var(--transition);
    will-change: transform, box-shadow;
    display: flex;
    flex-direction: column;
    height: 100%;
    position: relative;
    overflow: hidden;
    border: 1px solid rgba(0, 122, 255, 0.1);
    text-decoration: none;
    color: inherit;
  }
  
  .service-card:hover {
    transform: translateY(-10px);
    box-shadow: var(--shadow-medium);
  }

  .service-icon {
    font-size: clamp(2rem, 5vw, 3rem);
    margin-bottom: 1.5rem;
    display: inline-block;
    transition: transform 0.3s ease;
  }

  .service-card:hover .service-icon {
    transform: scale(1.1);
  }

  .service-card h3 {
    font-size: clamp(1.3rem, 3vw, 1.4rem);
    font-weight: 600;
    margin-bottom: 1rem;
    color: var(--text-card-primary);
  }

  .service-card p {
    color: var(--text-card-secondary);
    margin-bottom: 2rem;
    flex-grow: 1;
    line-height: 1.6;
    font-size: clamp(1rem, 2vw, 1.1rem);
  }

  .service-link {
    color: var(--accent-color);
    font-weight: 500;
    transition: var(--transition);
    display: inline-flex;
    align-items: center;
    font-size: clamp(0.9rem, 2vw, 1rem);
  }
  
  .service-card:hover .service-link {
    color: var(--accent-hover);
    transform: translateX(5px);
  }

  /* Animaci√≥n de ondas (efecto de reflejo) */
  .waves-container {
    position: absolute;
    bottom: 0; /* Cambio clave: alinea las ondas abajo */
    left: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;
    z-index: 1;
    pointer-events: none;
    filter: blur(5px);
    transform: scaleY(-1); /* Reflejo vertical */
  }

  .wave {
    position: absolute;
    bottom: 0;
    left: -20%;
    width: 140%;
    height: 100%;
    background-color: var(--wave-color-1);
    border-radius: 40%;
    transform-origin: 50% 100%;
    will-change: transform;
    animation: waveMovement 30s infinite ease-in-out alternate;
  }

  .wave.-two {
    background-color: var(--wave-color-2);
    animation-duration: 35s;
    animation-delay: -5s;
    transform: rotate(20deg) scale(1.05);
  }

  .wave.-three {
    background-color: var(--wave-color-3);
    animation-duration: 40s;
    animation-delay: -10s;
    transform: rotate(40deg) scale(1.1);
  }
  
  .wave.-four {
    background-color: var(--wave-color-4);
    animation-duration: 45s;
    animation-delay: -15s;
    transform: rotate(60deg) scale(1.15);
  }
  
  @keyframes waveMovement {
    0%, 100% {
      transform: rotate(var(--wave-rotate, 0deg)) scale(var(--wave-scale, 1));
    }
    50% {
      transform: rotate(calc(var(--wave-rotate, 0deg) + 5deg)) scale(calc(var(--wave-scale, 1) + 0.02));
    }
  }

  .wave.-one { --wave-rotate: 0deg; --wave-scale: 1; }
  .wave.-two { --wave-rotate: 20deg; --wave-scale: 1.05; }
  .wave.-three { --wave-rotate: 40deg; --wave-scale: 1.1; }
  .wave.-four { --wave-rotate: 60deg; --wave-scale: 1.15; }

  /* Animaciones optimizadas con prefers-reduced-motion */
  @media (prefers-reduced-motion: no-preference) {
    [data-animate] {
      opacity: 0;
      transition: 
        opacity 0.8s cubic-bezier(0.4, 0, 0.2, 1),
        transform 0.8s cubic-bezier(0.4, 0, 0.2, 1);
    }
    
    [data-animate="fade-in-up"] {
      transform: translateY(30px);
    }
    
    [data-animate="fade-in-scale"] {
      transform: scale(0.8);
    }

    [data-animate].animated {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
    
    [data-animate].animated[data-delay] {
      transition-delay: var(--delay);
    }
  }

  @media (prefers-reduced-motion: reduce) {
    .wave {
      animation: none;
      opacity: 0.05;
      transform: none;
    }
    
    .service-card {
      transition: none;
    }
  }

  /* Media Queries */
  @media (max-width: 768px) {
    .services-section {
      padding: clamp(1.5rem, 4vw, 2rem) 0;
    }
    
    .services-grid {
      grid-template-columns: 1fr;
      max-width: 400px;
      margin: 0 auto;
    }
    
    .service-card {
      padding: 1.5rem 1rem;
    }
  }

  @media (max-width: 480px) {
    .container {
      padding: 0 1rem;
    }
    
    .service-card {
      padding: 1.25rem;
    }
    
    .waves-container {
      display: none;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    'use strict';
    
    const observerOptions = {
      root: null,
      rootMargin: '50px',
      threshold: 0.15
    };
    
    let observer:any;
    
    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    
    if (!prefersReducedMotion) {
      observer = new IntersectionObserver((entries:any) => {
        entries.forEach((entry:any) => {
          if (entry.isIntersecting) {
            const delay:any = entry.target.dataset.delay || '0ms';
            entry.target.style.setProperty('--delay', `${delay}ms`);
            entry.target.classList.add('animated');
            observer.unobserve(entry.target);
          }
        });
      }, observerOptions);
      
      const animatedElements = document.querySelectorAll('[data-animate]');
      animatedElements.forEach(el => observer.observe(el));
    } else {
      const animatedElements = document.querySelectorAll('[data-animate]');
      animatedElements.forEach(el => el.classList.add('animated'));
    }
    
    window.addEventListener('beforeunload', () => {
      if (observer) {
        observer.disconnect();
      }
    });
  });
</script>